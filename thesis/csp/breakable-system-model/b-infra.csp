--------------------------------------------------------------------------------
-- Breakable System Model Infrastructure ---------------------------------------
--------------------------------------------------------------------------------
-- In FDR3 do set property refinement.desired_counterexample_count to 10000 or 
-- more.

channel instant
channel inputs_read, fault_activated, outputs_set

datatype SignalValue = NominalValue
                      | Omission 
                      | Comission 
                      | VooD -- Value outside of Domain
channel signal_input, signal_output: SignalValue

BLOCK = instant -> inputs_read -> outputs_set -> BLOCK
BlockInstanceChanset = {| inputs_read, fault_activated, outputs_set |}

SIGNAL = signal_input?x -> signal_output!x -> SIGNAL
--------------------------------------------------------------------------------
-- Fault activation ------------------------------------------------------------
--------------------------------------------------------------------------------
nametype BasicEventsIndexes = {1..10}
datatype BasicEventVariable = BasicEvent.BasicEventsIndexes
datatype SwitchStatus = On | Off

channel activate: BasicEventVariable
channel activationStatus: BasicEventVariable.SwitchStatus
channel available: union({0},BasicEventsIndexes)

FAULT_ACTIVATION(n) =
  let
    INIT = OPERATIONAL(mapFromList(< (BasicEvent.i, Off) | i<-<1..n> >))
    OPERATIONAL(m) = 
      let
        calcOff = card(keysOff)
        keysOff = keys(\ v @ v == Off)
        allKeys = keys(\ v @ true)
        keys(f) = set(< k | (k,v)<-mapToList(m), f(v) >)
      within
        (activate?var:keysOff -> OPERATIONAL(mapUpdate(m, var, On)))
        []
        (available!calcOff -> OPERATIONAL(m))
        []
        (activationStatus?var:allKeys!mapLookup(m, var) -> OPERATIONAL(m))
  within INIT
--------------------------------------------------------------------------------
-- Simultaneous control --------------------------------------------------------
--------------------------------------------------------------------------------
channel sync

SIMULTANEOUS =
  let
    INIT = sync -> OPERATIONAL(false)
    OPERATIONAL(canInc) =
      available?c ->
      (
        ((c > 0) and canInc) & sync -> OPERATIONAL(false)
        []
        activate?var -> OPERATIONAL(true)
      )
  within INIT

--------------------------------------------------------------------------------
-- Library ---------------------------------------------------------------------
--------------------------------------------------------------------------------
nametype PortIndex = {1..10}
channel in_port, out_port: PortIndex.SignalValue

BATTERY =
  inputs_read ->
  activationStatus!BasicEvent.1?state_ ->
    let
      outValue = if state_ == Off then NominalValue else Omission
    within
      out_port.1.outValue -> outputs_set -> BATTERY

BATTERY_BLOCK = 
  (BATTERY [|BlockInstanceChanset|] BLOCK)
  \ BlockInstanceChanset

MONITOR =
  in_port.1?in1 -> in_port.2?in2 -> inputs_read ->
  activationStatus!BasicEvent.1?state_ ->
  let
    best(a,b) = if a == NominalValue then a else b
    choose(a,b) = 
      if state_ == Off 
        then best(a,b)
        else if a == best(a,b) then b else a
  within
     out_port.1.choose(in1,in2) -> outputs_set -> MONITOR

MONITOR_BLOCK = 
  (MONITOR [|BlockInstanceChanset|] BLOCK)
  \ BlockInstanceChanset
--------------------------------------------------------------------------------
channel b1_m_in, b1_m_out, b2_m_in, b2_m_out: SignalValue

B1 = BATTERY_BLOCK
      [[ out_port.1 <- b1_m_in ]]
B2 = BATTERY_BLOCK
      [[ 
        activationStatus.BasicEvent.1 <- activationStatus.BasicEvent.2,
        out_port.1 <- b2_m_in
      ]]
  
M = MONITOR_BLOCK
      [[ 
        activationStatus.BasicEvent.1 <- activationStatus.BasicEvent.3,
        in_port.1 <- b1_m_out,
        in_port.2 <- b2_m_out 
      ]]

S_B1_M = SIGNAL 
          [[ 
            signal_input <- b1_m_in,
            signal_output <- b1_m_out
          ]]
          
S_B2_M = SIGNAL 
          [[ 
            signal_input <- b2_m_in,
            signal_output <- b2_m_out
          ]]

SYSTEM = 
  let
    P(1) = B1
    P(2) = B2
    P(3) = M
    P(4) = S_B1_M
    P(5) = S_B2_M
    P(6) = FAULT_ACTIVATION(3)
    P(7) = SIMULTANEOUS
    alpha(1) = {| instant, activationStatus.BasicEvent.1, b1_m_in |}
    alpha(2) = {| instant, activationStatus.BasicEvent.2, b2_m_in |}
    alpha(3) = {| instant, activationStatus.BasicEvent.3, b1_m_out, 
                  b2_m_out, out_port.1 |}
    alpha(4) = {| b1_m_in, b1_m_out |}
    alpha(5) = {| b2_m_in, b2_m_out |}
    alpha(6) = {| activate.BasicEvent.var, activationStatus.BasicEvent.var,
                  available.c 
                  | var<-{1..3}, c<-{0..3} |}
    alpha(7) = {| sync, activate.BasicEvent.var, available.c 
                  | var<-{1..3}, c<-{0..3} |}
    syncChanset = {| instant, b1_m_in, b1_m_out, b2_m_in, b2_m_out |}
    PROCESSES = || i: {1..7} @ [alpha(i)] P(i)
    signalsChanset = {| b1_m_in, b1_m_out, b2_m_in, b2_m_out |}
    stateAccess = {| available, activationStatus |}
  within
    PROCESSES \ union(signalsChanset, stateAccess) 


assert SYSTEM :[deadlock free]
assert SYSTEM :[divergence free]

SYNC_CONTROL(n) = 
  let
    INIT = OPERATIONAL(0)
    OPERATIONAL(c) =
      if c < n then sync -> OPERATIONAL(c+1)
      else out_port.1.Omission -> OPERATIONAL(c)
  within INIT

PROPERTY = SYSTEM [| {|sync, out_port.1.Omission|} |] SYNC_CONTROL(3)
    
assert not PROPERTY :[deadlock free [F]]

