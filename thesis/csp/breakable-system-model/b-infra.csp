--------------------------------------------------------------------------------
-- Breakable System Model Infrastructure ---------------------------------------
--------------------------------------------------------------------------------
channel sync
channel inputs_read, state_updated, outputs_set

datatype SignalValue = NominalValue
                      | Omission 
                      | Comission 
                      | VooD -- Value outside of Domain
channel signal_input, signal_output: SignalValue

BLOCK = sync -> inputs_read -> state_updated -> outputs_set -> BLOCK
BlockInstanceChanset = {| inputs_read, state_updated, outputs_set |}

SIGNAL = signal_input?x -> signal_output!x -> SIGNAL

--------------------------------------------------------------------------------
nametype PortIndex = {1..10}

datatype StateVariable = StateVar.{1..5}
datatype StateValue = NominalState
                    | InternalFailure

channel in_port, out_port: PortIndex.SignalValue
channel read_state, set_state: StateVariable.StateValue

STATE_CELL(var) = SKIP

STATE = SKIP

channel b1_m_in, b1_m_out, b2_m_in, b2_m_out: SignalValue

BATTERY =
  inputs_read -> 
  set_state.StateVar.1.NominalState -> state_updated ->
  out_port.1.NominalValue -> outputs_set -> BATTERY

BATTERY_BLOCK = 
  (BATTERY [|BlockInstanceChanset|] BLOCK)
  \ BlockInstanceChanset
  
B1 = BATTERY_BLOCK
      [[ out_port.1 <- b1_m_in ]]
B2 = BATTERY_BLOCK
      [[ 
        set_state.StateVar.1 <- set_state.StateVar.2,
        out_port.1 <- b2_m_in
      ]]

MONITOR =
  in_port.1?in1 -> in_port.2?in2 -> inputs_read ->
  let
    outValue = if in1 == NominalValue then NominalValue else in2
  within
    set_state.StateVar.1.NominalState -> state_updated ->
    out_port.1.outValue -> outputs_set -> MONITOR

MONITOR_BLOCK = 
  (MONITOR [|BlockInstanceChanset|] BLOCK)
  \ BlockInstanceChanset
  
M = MONITOR_BLOCK
      [[ 
        set_state.StateVar.1 <- set_state.StateVar.3,
        in_port.1 <- b1_m_out,
        in_port.2 <- b2_m_out 
      ]]

S_B1_M = SIGNAL 
          [[ 
            signal_input <- b1_m_in,
            signal_output <- b1_m_out
          ]]
          
S_B2_M = SIGNAL 
          [[ 
            signal_input <- b2_m_in,
            signal_output <- b2_m_out
          ]]

SYSTEM = 
  let
    P(1) = B1
    P(2) = B2
    P(3) = M
    P(4) = S_B1_M
    P(5) = S_B2_M
    alpha(1) = {| sync, set_state.StateVar.1, b1_m_in |}
    alpha(2) = {| sync, set_state.StateVar.2, b2_m_in |}
    alpha(3) = {| sync, set_state.StateVar.3, b1_m_out, b2_m_out, out_port.1 |}
    alpha(4) = {| b1_m_in, b1_m_out |}
    alpha(5) = {| b2_m_in, b2_m_out |}
    syncChanset = {| sync, b1_m_in, b1_m_out, b2_m_in, b2_m_out |}
  within
    || i: {1..5} @ [alpha(i)] P(i)
    